#ifndef CURRENCYMODEL_H
#define CURRENCYMODEL_H
//#include<QObject>
#include<QAbstractTableModel>
#include<QMap>


class CurrencyModel : public QAbstractTableModel
{

public:
    CurrencyModel(QObject *parent=0);
    void setCurrencyMap(const QMap<QString,double>&map);
    int rowCount(const QModelIndex &parent)const;
    int columnCount(const QModelIndex &parent)const;
    QVariant data(const QModelIndex &parent,int role)const;
    QVariant headerData(int section,Qt::Orientation orientation,int role) const;
private:
    QString currencyAt(int offset) const;
    QMap<QString,double>currencyMap;
};

#endif // CURRENCYMODEL_H














#include "CurrencyModel.h"

CurrencyModel::CurrencyModel(QObject *parent):QAbstractTableModel(parent)
{

}

int CurrencyModel::rowCount(const QModelIndex &parent)const
{
    return currencyMap.count();
}

int CurrencyModel::columnCount(const QModelIndex &parent) const
{
    return currencyMap.count();
}

QVariant CurrencyModel::headerData(int section,Qt::Orientation orientation,int role) const
{
if(role!=Qt::DisplayRole)
{
   return QVariant();
}
return currencyAt(section);

}

QString CurrencyModel::currencyAt(int offset) const
{
    return (currencyMap.begin()+offset).key();
}

void CurrencyModel::setCurrencyMap(const QMap<QString,double>&map)
{
    beginResetModel();
    currencyMap=map;
    endResetModel();

}

QVariant CurrencyModel::data(const QModelIndex &index,int role)const
{
    if(!index.isValid())
    {
        return QVariant();
    }

    if(role==Qt::TextAlignmentRole)
    {
        return int(Qt::AlignRight|Qt::AlignVCenter);
    }else if(role==Qt::DisplayRole){
        QString rowCurrency=currencyAt(index.row());
        QString columnCurrency=currencyAt(index.column());
        if(currencyMap.value(rowCurrency)==0.0){
            return "####";
        }
        double amount=currencyMap.value(columnCurrency)/currencyMap.value(rowCurrency);
        return QString("%1").arg(amount,0,'f',4);
    }
    return QVariant();
}

