构造函数使用explicit比较好一些。避免不期望的隐式类型转换。
Pass-by-reference-to-const传递自定义类型是个比较好的选择。
尽可能避开不明确行为，如访问空指针，数组越界。
条款01:视C++为语言联邦：C,Object-Oriented C++,Template C++,STL.
条款02：尽量以const,enum,inline 替换#define：
对于单纯常量，最好以const对象或enums替换#defines
对于形似函数的宏（macros）,最好改用inline函数替换#defines
条款03：尽可能使用const:
将某些东西声明为const 可帮助编译器侦测出错误用法。const可被施加于任何作用域内的对象，函数参数，函数返回类型，成员函数本体。
编译器强制实施bitwise constness,但你编写程序时应该使用“概念上的常量性”（conceptual constness）.用mutable。
当const和non-const成员函数有着实质等价的实现时，令non-const版本调用const版本可避免代码重复。
（return const_cast<char&>(static_cast<const TextBlock&>(*this)[position]);）

条款04：确定对象被使用前已被初始化：
为内置型对象进行手工初始化,因为C++不保证初始化它们。
构造函数最好使用成员初始值列，而不要在构造函数本体内使用赋值操作。初值列列出的成员变量，其排列次序应该和它们在class中的声明次序相同。
为免除“跨编译单元之初始化次序”问题，请以local static对象替换non-local static对象。（以函数返回static对象的引用）。
条款5：编译器可以暗自为class创建default构造函数，copy构造函数，copy assignment操作符，以及析构函数。
条款06：若不想使用编译器自动生成的函数，就该明确拒绝。（将一个基类copy和=函数声明为private,不给实现，新标准：删除函数）。
条款07：为多态基类声明virtual析构函数。：
polymorphic(带多态性质的)base classes应该声明一个virtual析构函数。如果class带有任何virtual函数，它就应该拥有一个virtual析构函数。
Classes的设计目的如果不是作为base classes使用，或不是为了具备多态性（polymorphically）,就不该声明virtual析构函数。

条款08：别让异常逃离析构函数。：
析构函数绝对不要吐出异常，如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉任何异常，然后吞下它们（不传播）或结束程序。
如果客户需要对某个操作函数运行期间抛出的异常做出反应，那么class应该提供一个普通函数（而非在析构函数中）执行该操作。
条款09：
在构造和析构期间不要调用virtual函数，因为这类调用从不下降至derived class(比起当前执行构造函数和析构函数的那层)。基类搞一个non-virtual然后再父类构造函数调用，在子类写一个返回类型为static的函数，在构造函数里传递给父类。逆向传递，避免函数调用时变量还没创建的问题。
条款10：令operator=返回一个reference to *this。
条款11：在operator=中处理“自我赋值”。
Widget& Widget::operator=(const Widget& rhs)
{
	Bitmap* pOrig = pb;  //记住原先的pb
        pb = new Bitmap(*rhs.pb);令pb指向*pb的一个复件（副本）
        delete pOrig;
	return *this;
}

条款12：复制对象时勿忘其每一个成分：
Copying函数应该确保复制“对象内的所有成员变量”及“所有base class成分”。
不要尝试以某个copying函数实现另一个copying函数。应该将共同机能放进第三个函数中。并由俩个copying函数共同调用。
条款13：以对象管理资源：
为防止资源泄露，请使用RAII对象，它们在构造函数中获得资源并在析构函数中释放资源。
俩个常被使用的RAII classes分别是tr1::shared_ptr和auto_ptr。前者通常是较佳选择，因为其copy行为比较直观。若选择auto_ptr，复制动作会使它（被复制物）指向null.

条款14：在资源管理类中小心coping行为。
复制RAII对象必须一并复制它所管理的资源，所以资源的copying行为决定RAII对象的copying行为。
普遍而常见的RAII class copying行为是：抑制copying，施行引用计数法（reference counting）。不过其他行为也都可能被实现。 智能指针指定删除器，独占指针--->转移底部对象的拥有权。

条款15：在资源管理类中提供对原始资源的访问。
APIs往往要求访问原始资源（raw resources），所以每一个RAII class应该提供一个“取得其所管理之资源”的办法。
对原始资源的访问可能经由显式转换或隐式转换。一般而言显式转换比较安全，但隐式转换对客户比较方便。

条款16:成对使用new和delete时要采取相同形式。
如果你在new表达式中使用[]，必须在相应的delete表达式中也使用[]。如果你在new表达式中不使用[],一定不要在相应的delete表达式中使用[]。---->内存布局不一样，调用的析构函数也不一样。

条款17：以独立语句将newed对象置入智能指针。
以独立语句将newed对象存储于（置入）智能指针内。如果不这样做，一旦异常被抛出，有可能导致难以察觉的资源泄漏。

条款18：让接口容易被正确使用，不易被误用。
好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中努力达成这些性质。
“促进正确使用”的办法包括接口的一致性，以及与内置类型的行为兼容。
“阻止误用”的办法包括建立新类型，限制类型上的操作，束缚对象值，以及消除客户的资源管理责任。
tr1::shared_ptr支持定制型删除器（custom deleter）.这可防范DLL问题，可被用来自动解除互斥锁（mutexes）等等。

条款19：设计class犹如设计type.
新type的对象应该如何被创建和销毁。
对象的初始化和对象的赋值该有什么样的差别。
新type的对象如果被passed by value,意味着什么？
什么是新type的“合法值”？
你的新type需要配合某个继承图系（inheritance graph）吗？
你的新type需要什么样的转换？
什么样的操作符和函数对此新type而言是合理的？
什么样的标准函数应该驳回？
谁该取用新type的成员？
什么是新type的“未声明接口”（undeclared interface）?
你的新type有多么一般化？
你真的需要一个新type吗?

条款20：宁以pass-by-reference-to-const替换pass-by-value:
尽量以pass-by-reference-to-const替换pass-by-value。前者通常比较高效，并可避免切割问题（slicing problem）.
以上规则并不适用于内置类型，以及STL的迭代器和函数对象。对它们而言，pass-by-value往往比较适当。

条款21：必须返回对象时，别妄想返回其reference.
绝不要返回pointer或reference指向一个local stack对象，或返回reference指向一个heap-allocated对象，或返回pointer或reference指向一个local static对象而有可能同时需要多个这样的对象。条款4已经为“在单线程环境中合理返回reference指向一个local static对象”提供了一份设计实例。

条款22：将成员变量声明为private:
te。这可赋予客户访问数据的一致性，可细微划分访问控制，允诺约束条件获得保证，并提供class作者以充分的实现弹性。
protected并不比public更具封装性。

条款23：宁以non-member，non-friend替换member函数。
宁可拿non-member non-friend函数替换member函数。这样做可以增加封装性，包裹弹性和机能扩充性。 --->namespace可以写在多个头文件，也是C++标准库的组织方式。

条款24：若所有参数皆需类型转换，请为此采用non-member函数----->隐士类型转换如*写道外面支持混合运算。
如果你需要为某个函数的所有参数（包括被this指针所指的那个隐喻参数）进行类型转换，那么这个函数必须是个non-member.

条款25：考虑写出一个不抛异常的swap函数。
当std::swap对你的类型效率不高时，提供一个swap成员函数，并确定这个函数不抛出异常。
如果你提供一个member swap，也该提供一个non-member swap用来调用前者。对于classes(而非templates),也请特化std::swap.
调用swap时应针对std::swap使用using声明式，然后调用swap并且不带任何“命名空间资格修饰”。
为“用户定义类型”进行std templates全特化是好的，但千万不要尝试在std内加入某些对std而言全新的东西。

条款26：尽可能延后变量定义式的出现时间，并在定义的时候就初始化。
条款27：尽量少做转型动作。
如果可以，尽量避免转型，特别是在注重效率的代码中避免dynamic_casts。如果有个设计需要转型动作，试着发展无需转型的替代设计。
如果转型是必要的，试着将它隐藏于某个函数背后。客户随后可以调用该函数，而不需将转型放进他们自己的代码内。
宁可使用C++style(新式)转型，不要使用旧式转型。前者很容易辨识出来，而且也比较有着分门别类的职掌。

条款28：避免返回handles指向对象内部成分：
避免返回handles(包括references，指针，迭代器)指向对象内部。遵守这个条款可增加封装性，帮助const成员函数的行为像个const,并将发生"虚吊号码牌"(dangling handles)的可能性降至最低。

条款29：为“异常安全”而努力是值得的
异常安全函数（Exception-safe functions）即使发生异常也不会泄漏资源或允许任何数据结构败坏。这样的函数区分为三种可能的保证：基本型，强烈型，不抛异常型。
“强烈保证”往往能够以copy-and-swap实现出来，但“强烈保证”并非对所有函数都可实现或具备现实意义。
函数提供的“异常安全保证”通常最高只等于其所调用之各个函数的“异常安全保证”中的最弱者。

条款30：透彻了解inlining的里里外外。
将大多数inlining限制在小型，被频繁调用的函数身上。这可使日后的调试过程和二进制升级（binary upgradability）更容易，也可使潜在的代码膨胀问题最小化，使程序的速度提升机会最大化。
不要只因为function templates出现在头文件，就将它们声明为inline.

条款31：将文件间的编译依存关系降至最低。
支持“编译依存性最小化”的一般构想是：相依于声明式，不要相依于定义式。基于此构想的俩个手段是Handle classes和Interface classes。
程序库头文件应该以“完全且仅有声明式”（full and declaration-only forms）的形式存在。这种做法不论是否涉及templates都适用。

条款32：确定你的public继承塑模出来is-a关系。
“public继承”意味is-a。适用于base classes身上的每一件事情一定也适用于derived classes身上。因为每一个derived class对象也都是一个base class对象。
 
条款33避免遮掩继承而来的名称。
derived classes 内的名称会遮掩base classes内的名称。在public继承下从来没有人希望如此。
为了让被遮掩的名称在见天日，可使用using 声明式或转交函数（forwarding functions）.(inline转交函数)。

条款34：区分接口继承和实现继承。
接口继承和实现继承不同，在public继承之下，derived classes总是继承base class的接口。
pure virtual函数只具体指定接口继承。
简朴的（非纯）impure virtual函数具体指定接口继承及缺省实现继承。
non-virtual函数具体指定接口继承以及强制性实现继承。

条款35：考虑virtual函数以外的其他选择。
使用non-virtual interface(NVI)手法，那是Template Method设计模式的一种特殊形式。它以public non-virtual成员函数包裹较低访问性（private或protected）的virtual函数。
将virtual函数替换为“函数指针成员变量”，这是Strategy设计模式的一种分解表现形式。
以tr1::function成员变量替换virtual函数，因而允许使用任何可调用物（callable entity）搭配一个兼容于需求的签名式，这也是Strategy设计模式的某种形式。
将继承体系内的virtual函数替换为另一个继承体系内的virtual函数。这是Strategy设计模式的传统实现手法。

条款36：绝不重新定义继承而来的non-virtual函数。
条款37：绝不重新定义继承而来的缺省参数值。
绝对不要重新定义一个继承而来的缺省参数值，因为缺省参数值都是静态绑定，而virtual函数0000--->你唯一应该覆写的东西----->确是动态绑定。

条款38：通过复合塑模出has-a或“根据某物实现出”。
复合（composition）的意义和public继承完全不同。
在应用域（application domain）,复合意味is-implemented-in-terms-of(根据某物实现出)。

条款39:明智而审慎地使用private继承。
条款40：明智而审慎的使用多重继承。
多重继承比单一继承复杂。它可能导致新的歧义性，以及对virtual继承的需要。
virtual继承会增加大小，速度，初始化（及赋值）复杂度等等成本。如果virtual base classes不带任何数据，将是最具实用价值的情况。
多重继承的确有正当用途。其中一个情节涉及“public 继承某个Interface class”和“private继承某个协助实现的class”的俩相结合。

条款41：了解隐式接口和编译期多态。
classes和templates都支持接口（interfaces）和多态（polymorphism）。
对classes而言接口是显式的（explicit），以函数签名为中心。多态则是通过virtual函数发生于运行期。
对template参数而言，接口是隐式的（implicit），奠基于有效表达式，多态则是通过template具现化和函数重载解析（function overloading resolution） 发生于编译期。

条款42：了解typename的双重意义。
声明template参数时，前缀关键字class和typename可互换。
请使用关键字typename标识嵌套从属类型名称；但不得在base class lists(基类列)或member initialization list(成员初值列)内以它做为base class修饰符。

条款43：学习处理模板化基类内的名称
可在derived class templates内通过“this->”指涉及base class templates内的成员名称，或籍由一个明白写出的“base class资格修饰符”完成。

条款44：将参数无关的代码抽离templates
Templates生成多个classes和多个函数，所以任何template代码都不该与某个造成膨胀的template参数产生相依关系。
因非类型模板参数（non-type template parameters）而造成的代码膨胀，往往可以消除，做法是以函数参数或class成员变量替换template参数。
因类型参数（type parameters）而造成的代码膨胀，往往可降低，做法是让带有完全相同二进制表述（binary representations）的具现类型（instantiation types）共享实现码。

条款45：运用成员函数模板接受所有兼容类型。
请使用member function templates（成员函数模板）生成“可接受所有兼容类型”的函数。
如果你声明member templates用于“泛化copy构造”或“泛化assignment操作“，你还是需要声明正常的copy构造函数和copy assignment操作符。

条款46：需要类型转换时请为模板定义非成员函数。
当我们编写一个class template， 而他所提供之“于此template相关的”函数支持“所有参数之隐式类型转换”时，请将那些函数定义为"class template内部的friend函数"。

















































